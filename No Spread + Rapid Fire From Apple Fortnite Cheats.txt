/* Rapid Fire */ 
static void Rapid(float time)
{
	uint64_t CurrentWeapon = 0;
	float i = 0;
	float c = 0;

	CurrentWeapon = *(uint64_t*)(LocalPawn + 0x5A0); //current weapon

	if (CurrentWeapon) {
		i = *(float*)(CurrentWeapon + 0x8BC);//LastFireTime
		c = *(float*)(CurrentWeapon + 0x8C0); //LastFireTimeVerified
		*(float*)(CurrentWeapon + 0x8BC) = i + c - time; //LastFireTime

		return;
	}
}
inline bool __fastcall SetCurrentSpread(__int64 CurrentWeapon, float spread)
{
	unsigned __int8* currentWeapon;
	__int64 v9;
	int v10;
	double v29;
	float result;

	currentWeapon = (unsigned __int8*)CurrentWeapon;
	v9 = currentWeapon[0xEAE];
	v10 = currentWeapon[0xEAF] | 0x4C000001;

	if (!v9 || v10)
	{
		return 0;
	}

	v29 = *(DWORD*)&currentWeapon[4 * v9 + 0xE9E];

	result = *(float*)(v10 ^ (int)v29) = spread;

	return result;
}
/* No Spread */ 